# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}$4 {
	public:
		$1(${2:arguments});
		virtual ~$1();
	
	private:
		${3:/* data */}
	};
# Chain setter
snippet chain
	${1:className}& $1::${2:function}(${3:type} ${4:var}) {
	    ${5:variable} = $4;
	    return *this;
	}

	$3 $1::$2() {
	    return $5;
	}
	${6}
# Getter and setter
snippet getseth
	${1:type} ${2:function}() const;
	void $2($1 _$2);
	${3}
snippet getset
	${1:type} ${2:class}::${3:function}() const {
	    return m_$3;
	}

	void $2::$3($1 _$3) {
	    m_$3 = _$3;
	}
	${4}
